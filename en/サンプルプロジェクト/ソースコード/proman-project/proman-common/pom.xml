<?xml version="1.0" encoding="UTF-8"?>
<project xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://maven.apache.org/POM/4.0.0"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <parent>
    <groupId>com.nablarch.example.proman</groupId>
    <artifactId>proman-project</artifactId>
    <version>0.0.1</version>
  </parent>

  <artifactId>proman-common</artifactId>
  <version>0.0.1</version>
  <packaging>jar</packaging>

  <properties>
    <nablarch.db.jdbcDriver>org.postgresql.Driver</nablarch.db.jdbcDriver>
    <nablarch.db.url>jdbc:postgresql://localhost:5432/postgres</nablarch.db.url>
    <nablarch.db.adminUser>postgres</nablarch.db.adminUser>
    <nablarch.db.adminPassword>password</nablarch.db.adminPassword>
    <nablarch.db.user>postgres</nablarch.db.user>
    <nablarch.db.password>password</nablarch.db.password>
    <nablarch.db.schema>public</nablarch.db.schema>
    <!-- 'gsp-target' directory is not used.
    When a module is referenced instead of using jar to resolve the dependency relationship,
    gsp-target/classes is not set as the class pass if the profile gsp is not valid.
    This is because the entity generated by the dependency module cannot be resolved as a result.
    -->
    <dba.gsp-target-dir>${project.build.directory}</dba.gsp-target-dir>
  </properties>

  <dependencies>
    <dependency>
      <groupId>com.nablarch.framework</groupId>
      <artifactId>nablarch-core-validation-ee</artifactId>
    </dependency>
    <dependency>
      <groupId>com.nablarch.framework</groupId>
      <artifactId>nablarch-common-dao</artifactId>
    </dependency>
    <dependency>
      <groupId>com.nablarch.framework</groupId>
      <artifactId>nablarch-common-code-jdbc</artifactId>
    </dependency>
    <dependency>
      <groupId>com.nablarch.framework</groupId>
      <artifactId>nablarch-common-date</artifactId>
    </dependency>
    <dependency>
      <groupId>com.nablarch.framework</groupId>
      <artifactId>nablarch-common-idgenerator-jdbc</artifactId>
    </dependency>

    <dependency>
      <groupId>org.hibernate</groupId>
      <artifactId>hibernate-validator</artifactId>
      <version>5.1.3.Final</version>
    </dependency>
    <dependency>
      <groupId>org.glassfish</groupId>
      <artifactId>javax.el</artifactId>
      <version>3.0.0</version>
    </dependency>

    <dependency>
      <groupId>com.nablarch.configuration</groupId>
      <artifactId>nablarch-main-default-configuration</artifactId>
      <scope>runtime</scope>
    </dependency>


  </dependencies>

  <profiles>
    <!-- gsp-dba-plugin -->
    <profile>
      <id>gsp</id>
      <build>
        <plugins>
          <plugin>
            <groupId>jp.co.tis.gsp</groupId>
            <artifactId>gsp-dba-maven-plugin</artifactId>
            <executions>
              <execution>
                <id>gsp-prepare-database</id>
                <phase>initialize</phase>
                <goals>
                  <goal>generate-ddl</goal>
                  <goal>execute-ddl</goal>
                  <goal>load-data</goal>
                  <!-- The schema does not need to be set as an artifact as the common module is built at the same time -->
                  <!--                  <goal>export-schema</goal>-->
                </goals>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>
  </profiles>

  <build>
    <pluginManagement>
      <plugins>
        <plugin>
          <groupId>jp.co.tis.gsp</groupId>
          <artifactId>gsp-dba-maven-plugin</artifactId>
          <dependencies>
            <!-- Overwritten with the JDBC driver suited to the database product used with the project -->
            <dependency>
              <groupId>org.postgresql</groupId>
              <artifactId>postgresql</artifactId>
              <version>${postgres.jdbc.driver.version}</version>
            </dependency>
          </dependencies>
          <configuration>
            <extraDdlDirectory>src/main/resources/extraDdl</extraDdlDirectory>
            <!-- This is output to target/classes by default, but in this case, it is included in jar.
                 It also does not need to be input to classes as it is loaded from the file system instead of a class path when using the plugin.
            -->
            <diconDir>target/gsp/dicon</diconDir>
          </configuration>
        </plugin>
      </plugins>
    </pluginManagement>
    <plugins>
      <!--
       Make generate-entity independent even if a gsp profile is not specified,
       so that mvn clean compile can be executed.
       -->
      <plugin>
        <groupId>jp.co.tis.gsp</groupId>
        <artifactId>gsp-dba-maven-plugin</artifactId>
        <executions>
          <execution>
            <id>gsp-generate-entity</id>
            <phase>generate-sources</phase>
            <goals>
              <goal>generate-entity</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>build-helper-maven-plugin</artifactId>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-checkstyle-plugin</artifactId>
      </plugin>
      <plugin>
        <groupId>com.github.spotbugs</groupId>
        <artifactId>spotbugs-maven-plugin</artifactId>
      </plugin>
      <plugin>
        <groupId>org.jacoco</groupId>
        <artifactId>jacoco-maven-plugin</artifactId>
      </plugin>
    </plugins>
  </build>

</project>

