pipeline {
  agent any
  triggers {
    pollSCM('*/1 * * * *')
  }
  tools {
    maven 'mvn3'
  }
  options {
    buildDiscarder(logRotator(numToKeepStr: '3'))
  }
  environment {
    SONAR_HOST_URL = 'http://10.0.1.133/sonarqube'
    // 以下は開発環境の接続情報である。
    // 全ての開発者が知っても差し支えない情報であるため、全ての開発者が参照できるファイル(本ファイル)に記載している。
    DEMO_HOST = '10.0.1.100'
    DEMO_PORT = '22'
    DEMO_USERNAME = 'centos'
    DEMO_PASSWORD = 'pass789-'
    //ビルドする際のカレントディレクトリ
    PROJECT_CURRENT_DIR = 'サンプルプロジェクト/ソースコード/proman-project/'
  }
  stages {
    stage('mvn install') {
      steps {
        echo 'mvn install'
        dir(PROJECT_CURRENT_DIR) {
          sh 'mvn clean -s ci/settings.xml -Dmaven.repo.local=${WORKSPACE}/repository'
          sh 'mvn -P gsp clean generate-resources -pl proman-common -s ci/settings.xml -Dmaven.repo.local=${WORKSPACE}/repository'
          sh 'mvn -P demo,!development install -s ci/settings.xml -Dmaven.repo.local=${WORKSPACE}/repository'
        }
      }
      post {
        success { rocketSend message: 'mvn install', emoji: ':blush:' }
        failure { rocketSend message: 'mvn install', emoji: ':sob:' }
      }
    }

    stage('checkstyle and spotbugs') {
      steps {
        echo 'checkstyle and spotbugs'
        dir(PROJECT_CURRENT_DIR) {
          catchError {
            sh 'mvn checkstyle:checkstyle spotbugs:check -pl proman-common -s ci/settings.xml -Dmaven.repo.local=${WORKSPACE}/repository'
            sh 'mvn checkstyle:checkstyle spotbugs:check -pl proman-web -s ci/settings.xml -Dmaven.repo.local=${WORKSPACE}/repository'
            sh 'mvn checkstyle:checkstyle spotbugs:check -pl proman-batch -s ci/settings.xml -Dmaven.repo.local=${WORKSPACE}/repository'
          }
          sh 'mvn site -pl proman-common -s ci/settings.xml'
          sh 'mvn site -pl proman-web -s ci/settings.xml'
          sh 'mvn site -pl proman-batch -s ci/settings.xml'
          archiveArtifacts allowEmptyArchive: true, artifacts: 'proman-common/target/site/**'
          archiveArtifacts allowEmptyArchive: true, artifacts: 'proman-web/target/site/**'
          archiveArtifacts allowEmptyArchive: true, artifacts: 'proman-batch/target/site/**'
        }
      }
      post {
        success { rocketSend message: 'proman-common checkstyle and spotbugs', emoji: ':blush:' }
        failure { rocketSend message: 'proman-common checkstyle and spotbugs', emoji: ':sob:' }
      }
    }
    
    stage('create batch jar') {
      when {
        allOf {
          branch 'develop'
          expression { return currentBuild.result != 'FAILURE' }
        }
      }
      steps {
        echo 'create batch jar'
        dir(PROJECT_CURRENT_DIR) {
          sh 'mvn -P demo,!development clean package -pl proman-batch -s ci/settings.xml -Dmaven.repo.local=${WORKSPACE}/repository -DskipTests=true'
        }
      }
      post {
        success { rocketSend message: 'create batch jar', emoji: ':blush:' }
        failure { rocketSend message: 'create batch jar', emoji: ':sob:' }
      }
    }

    stage('create executable jar') {
      when {
        allOf {
          branch 'develop'
          expression { return currentBuild.result != 'FAILURE' }
        }
      }
      steps {
        echo 'Create executable jar'
        dir(PROJECT_CURRENT_DIR) {
          sh 'mvn -P demo,!development clean compile -pl proman-web -s ci/settings.xml -Dmaven.repo.local=${WORKSPACE}/repository'
          sh 'mvn -P demo,!development waitt:jar -pl proman-web -s ci/settings.xml -Dmaven.repo.local=${WORKSPACE}/repository'
        }
      }
      post {
        success { rocketSend message: 'create executable jar', emoji: ':blush:' }
        failure { rocketSend message: 'create executable jar', emoji: ':sob:' }
      }
    }

    stage('Deploy to demo') {
      when {
        allOf {
          branch 'develop'
          expression { return currentBuild.result != 'FAILURE' }
        }
      }
      steps {
        echo 'Create app resources'
        dir(PROJECT_CURRENT_DIR) {
          sh 'rm -rf app-proman-web'
          sh 'mkdir -p app-proman-web'
          sh 'mkdir -p app-proman-web/web'
          sh 'cp -r proman-web/ci/deploy-to-demo/* app-proman-web/'
          sh 'cp $(find proman-web/target/ -name *standalone.jar) app-proman-web/web'
          sh 'cp -r proman-web/src/main/webapp/ app-proman-web/web/webapp/'
          sh 'mvn clean -s ci/settings.xml'
          sh 'mkdir -p app-proman-web/web/project'
          sh 'cp -r pom.xml app-proman-web/web/project/'
          sh 'cp -r ci app-proman-web/web/project/'
          sh 'cp -r proman-web app-proman-web/web/project/'
          sh 'cp -r proman-common app-proman-web/web/project/'
          sh 'cp -r proman-batch app-proman-web/web/project/'
          sh 'cp -r proman-arch-test app-proman-web/web/project/'
          echo 'Send app to demo'
          sh 'sshpass -p ${DEMO_PASSWORD} ssh -p ${DEMO_PORT} -oStrictHostKeyChecking=no ${DEMO_USERNAME}@${DEMO_HOST} "rm -rf app-proman-web"'
          sh 'sshpass -p ${DEMO_PASSWORD} scp -P ${DEMO_PORT} -oStrictHostKeyChecking=no -r app-proman-web/ ${DEMO_USERNAME}@${DEMO_HOST}:~/'
          sh 'sshpass -p ${DEMO_PASSWORD} ssh -p ${DEMO_PORT} -oStrictHostKeyChecking=no ${DEMO_USERNAME}@${DEMO_HOST} "ls -lR app-proman-web"'
          echo 'Start app'
          sh 'sshpass -p ${DEMO_PASSWORD} ssh -p ${DEMO_PORT} -oStrictHostKeyChecking=no ${DEMO_USERNAME}@${DEMO_HOST} "cd app-proman-web && sh up.sh"'
          archiveArtifacts 'app-proman-web/**'
        }
      }
      post {
        success { rocketSend message: 'Deploy to demo', emoji: ':blush:' }
        failure { rocketSend message: 'Deploy to demo', emoji: ':sob:' }
      }
    }

    stage('Transaction Test') {
      when {
        allOf {
          branch 'develop'
          expression { return currentBuild.result != 'FAILURE' }
        }
      }
      steps {
        echo 'Waiting for demo server starting...'
        script {
          try {
            timeout(time: 10, unit: "MINUTES") {
              waitUntil(initialRecurrencePeriod: 15000) {
                def status = sh(
                  script: "wget -q http://${DEMO_HOST} -O /dev/null",
                  returnStatus: true
                )
                return (status == 0)
              }
            }
          } catch (exception) {
            error "Timeout. Demo server does not start. ${exception}: ${exception.message}"
          }
        }

        echo 'Run Test'
        dir("${PROJECT_CURRENT_DIR}/proman-jmeter") {
          catchError {
            sh "mvn -s ../ci/settings.xml -P ci clean test"
          }
          archiveArtifacts allowEmptyArchive: true, artifacts: 'target/test-classes/**'
          junit "target/surefire-reports/TEST-com.nablarch.example.proman.JMeterTest.xml"
        }
      }
      post {
        success { rocketSend message: 'Transaction Test', emoji: ':blush:' }
        failure { rocketSend message: 'Transaction Test', emoji: ':sob:' }
      }
    }
  }
}